// Code generated by zederr generator. DO NOT EDIT.
package {{ .PackageName }}

import (
{{ range .Imports }}
    "{{ . }}"
{{ end}}
)

type Error struct {
    httpCode        int
    grpcCode        int
    id          string
    params      map[string]interface{}
    internalErr error
}

func (e *Error) Error() string {
    return fmt.Sprintf("app_error: [%s]; code: [%d]; params [%v]; internal_error [%v]", e.id, e.code, e.params, e.internalErr)
}

func (e Error) Code() int {
    return e.code
}

func (e Error) ErrID() string {
    return e.id
}

func (e Error) Params() map[string]interface{} {
    return e.params
}

func (e Error) InternalErr() error {
    return e.internalErr
}

{{ range .Error }}
func New{{ .Name }}(err error, params ...map[string]interface{}) *Error {
    var p map[string]interface{}
    if len(params) > 0 {
        p = params[0]
    }
    return &Error{code: {{ .Code }}, id: "{{ .ID }}", params: p, internalErr: err}
}
{{ end }}
