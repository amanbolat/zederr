package zederr

import (
	"fmt"

	pbzederrv1 "github.com/amanbolat/zederr/pkg/pb/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/types/known/structpb"
)

// ErrorParams is an interface for error parameters.
type ErrorParams interface {
	ErrorParams() map[string]interface{}
	ProtoParams() *structpb.Struct
}

// Error represents an error generated by zederr.
// For each error entry in the error list file a new constructor and
// error parameters struct are generated.
type Error[P ErrorParams] struct {
	err      error
	id       string
	httpCode int
	grpcCode codes.Code
	params   P
}

func NewError[P ErrorParams](
	err error,
	id string,
	httpCode int,
	grpcCode codes.Code,
	params P,
) *Error[P] {
	return &Error[P]{
		err:      err,
		id:       id,
		httpCode: httpCode,
		grpcCode: grpcCode,
		params:   params,
	}
}

// Error implements error interface.
func (e Error[P]) Error() string {
	return fmt.Sprintf("failed with error; "+
		"id: [%s]; "+
		"http_code: [%d]; "+
		"grpc_code: [%d]; "+
		"params [%+v]; "+
		"internal_error [%s]", e.id, e.httpCode, e.grpcCode, e.params, e.err)
}

// Unwrap returns the wrapped error.
func (e Error[P]) Unwrap() error {
	return e.err
}

// GrpcStatus returns a gRPC status with details.
func (e Error[P]) GrpcStatus() *status.Status {
	st, _ := status.New(e.grpcCode, e.id).WithDetails(&pbzederrv1.Error{
		Id:       e.id,
		HttpCode: int64(e.httpCode),
		GrpcCode: uint32(e.grpcCode),
		Params:   e.params.ProtoParams(),
	})

	return st
}

// GRPCCode returns a gRPC code.
func (e Error[P]) GRPCCode() codes.Code {
	return e.grpcCode
}

// HTTPCode returns an HTTP code.
func (e Error[P]) HTTPCode() int {
	return e.httpCode
}

// Params returns error parameters.
func (e Error[P]) Params() P {
	return e.params
}
